import{O as r}from"./index.b30409fa.js";const c=async(a="")=>{let o=null;const n=await fetch(`${r}/urls`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),"detail"in e?o=e.detail:o="Server connection failed",null));if(o)throw o;return n.OPENAI_API_BASE_URLS},l=async(a="",o)=>{let n=null;const e=await fetch(`${r}/urls/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({urls:o})}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?n=t.detail:n="Server connection failed",null));if(n)throw n;return e.OPENAI_API_BASE_URLS},h=async(a="")=>{let o=null;const n=await fetch(`${r}/keys`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),"detail"in e?o=e.detail:o="Server connection failed",null));if(o)throw o;return n.OPENAI_API_KEYS},p=async(a="",o)=>{let n=null;const e=await fetch(`${r}/keys/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({keys:o})}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?n=t.detail:n="Server connection failed",null));if(n)throw n;return e.OPENAI_API_KEYS},u=async(a="")=>{let o=null;const n=await fetch(`${r}/models`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>{var i;return o=`OpenAI: ${((i=t==null?void 0:t.error)==null?void 0:i.message)??"Network Problem"}`,[]});if(o)throw o;const e=Array.isArray(n)?n:(n==null?void 0:n.data)??null;return e&&e.map(t=>({id:t.id,name:t.name??t.id,external:!0})).sort((t,i)=>t.name.localeCompare(i.name))},d=async(a="",o,n=r)=>{let e=null;const t=await fetch(`${n}/chat/completions`,{method:"POST",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify(o)}).catch(i=>(console.log(i),e=i,null));if(e)throw e;return t},y=async(a="",o="alloy",n="")=>{let e=null;const t=await fetch(`${r}/audio/speech`,{method:"POST",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify({model:"tts-1",input:n,voice:o})}).catch(i=>(console.log(i),e=i,null));if(e)throw e;return t};export{h as a,p as b,u as c,d,c as g,y as s,l as u};
